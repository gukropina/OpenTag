{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\vieww12000\viewh14520\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200

\f0\fs22 \cf0 Lean Open Tag Tests\

\b What next?\

\b0 I'm getting Github to provide version control, and so I can have version control across my two computers.\
I need to change to an IR LED powered by a transister. That will give me more power, which may make the signal go farther. \

\b \
Can I send and receive my protocol?\

\b0 	I'm going to manually send my protocol for a tag ID of 0. This will send the following signal, using a protocol duration of 600 microseconds:\
Start: 1800 microseconds (ON)\
Wait: 600 microseconds (OFF)\
0: 600 microseconds (ON)\
Wait: 600 microseconds (OFF)\
End: 2400 microseconds (ON)\
the values that I record are 1,610, 460, 2,139 microseconds pulses. This should translate to a protocol value of 2, 0, 3. This is about 10% off from what I thought that I was sending. I added 10% to the time that I thought I was recording, and then I got 1750, 525, 2350. This is much better. My protocol uses its own map function, which lets you be +/- half the protocol away from a value to call it that value. So, as long as I'm +/- 300 away from the protocol duration that I'm supposed to be at, I'm good.	\
I tested my function that sends a tag from an array. It works. Yay!\
I changed the time to 750 microseconds for testing. I tested my code, put in more debuggin, and it works! Yay!
\b \
How long can my IR receiver receive a pulse for before it goes back to high?\

\b0 	I tested this by hooking up my IR Receiver to my computer and sending a 5,000 microsecond pulse to my arduino. I only registered the pulse for 4,600 to 4,500 microseconds. This was supposed to record data every 23 microseconds, however, if that timing was off by 10%, then I am seeing the effect of that here. \
	When I made my IR Receiver send a 30,000 microsecond pulse (this is the upper limits of a 16 bit integer for storage space, and I'm going to use ints to store how long in microseconds the pulse length is). I received the signal for 27,000 microseconds, and I saw that the signal was probably bouncing off of the walls and hitting the receiver again, since I saw more than 3 signals (I would send 3 signals of equal length, and I'd see 20+, with the first 3 of the same length, and the other ones of kind of random length). This means I can go up to 30 milliseconds, or 30,000 microseconds for my MAXIMUM pulse length. This also means that, since my protocol has 4 signals, one of which is 4 times the protocol length, my maximum protocol length (the time that my potocol uses as a base) is 30,000/4 = 
\b 7,500 microseconds
\b0 . \

\b How does the map function work?\

\b0 I have a theory of how the map function works. It takes the first range, 0-2,400, and chops it up into the second range (0,3), sections, or 4 in my case. that would mean every 600 is a new number. However, at this input: map(2162, 0, 2400, 0, 3), it ouputs 2. I think that you should write your own map function, because this one is not straightforward in its application.\
For example: map(2162, 0, 2300, 0, 3), also outputs 2\
map(2162, 0, 2200, 0, 3), also outputs 2\
map(2162, 0, 2100, 0, 3), also outputs 3. \
From Arduino website:\
For the mathematically inclined, here's the whole function\
long map(long x, long in_min, long in_max, long out_min, long out_max)\
\{\
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\
\}\
where, in_min = 0; in_max = 2400, out_min = 0, out_max = 3.\
For me, this will do the following: (x*(3))/(2400)         [(x - 0) * (3 - 0) / (2400- 0) + 0]\
I know that the arduino truncates, since when I input 2162, my output should be 2.7, which it said was 2. Therefore, the function will start at 0, and go up by 1 every out_max/in_max, which for me is every 3/2400 or 800. If you wanted to use map, you'd want to have half of the protocol length in either direction go to that number. So, you'd want 300-900 to be 0, 901-1200 be 1, 1200-1800 be 2, and 1801-2400 be 3. Problem is, you have this initial 300 that you don't want it to see. So, just make your own function. \

\b Update 3/16/15\

\b0 Success. I can now pass a pin into my function (I think). I now have to actually hook up a new receiver and see if I get something different.\
I sent a tag to my receiver using V1 of my tag unit (3.5\'94 lens, 1A current, 600 micro sec protocol). I got the following from the serial monitor:\
tag to send is: 0, 1,  \
tag received\
Error: 8\
Microseconds of pulse: 1955\
Maps to: 2\
Microseconds of pulse: 667\
Maps to: 0\
Microseconds of pulse: 1288\
Maps to: 1\
Microseconds of pulse: 2576\
Maps to: 2\
Tag received: 0, 1,  \
Basically, I think I\'92m timing out too quickly, since I\'92m getting a timeout error. I may have to change my timeout code. Also, the last pulse is not mapping correctly. My protocol is based off of 600 microsec pulses, so an end code is 2400 micro sec +/- 300. 2576 is within this range, so it should be mapped to 3, which it isn\'92t. So 2 problems to solve.\
Nope. The problem was that my receiver was using a 750 ms protocol, and I think my tag unit is still based off of 600 ms. \
Although, this does raise the issue that my timeout is based on 30 ms, and my tags are actually being sent in micro seconds, not milliseconds. \

\b Update 3/17/15\

\b0 I updated my code so that it can read a tag coming in on multiple pins. However, occasionally I\'92m seeing a timeout error with my end code (timeout error is error 8):\
tag received on pin 8\
Error: 8\
Microseconds of pulse: 2047\
Maps to: 2\
Microseconds of pulse: 736\
Maps to: 0\
Microseconds of pulse: 1403\
Maps to: 1\
Microseconds of pulse: 2714\
Maps to: 4\
Tag received: 0, 1,  \
I\'92m using a 600 micro sec pulse time, so my end signal can be anywhere between 2100-2700 microseconds long. I\'92m 14 microseconds too long. \
You know, this output looks a lot more like I\'92m using a 750 micro sec protocol duration.\
But when I try a 750 microsecond duration, I get the opposite problem with my last signal, I map it to a 2 instead of a 3:\
tag received on pin 9\
Error: 8\
Microseconds of pulse: 1955\
Maps to: 2\
Microseconds of pulse: 667\
Maps to: 0\
Microseconds of pulse: 1311\
Maps to: 1\
Microseconds of pulse: 2576\
Maps to: 2\
Tag received: 0, 1, \
So, I think that I have an adequate system for timing, but I should make it more robust. It\'92d be nice if I configured a hardware timer to do the heavy lifting for me. It could start timing in microseconds, and stop when I don\'92t see anything anymore.\
Possibilities: Use the micros() function. It has a resolution of 4 microseconds\
use a crystal oscillator instead of a resonator. That will give me more precise timing.\
\ul Result\ulnone : I changed my code to read in information using the micros() function. It seems to be more reliable. However, I can\'92t use the same function to time how long I\'92m sending pulses. micros() uses interrupts to count, and my send_pulse() function turns off interrupts so that it has precise timing. If I change send_pulse() to use a hardware timer, then I can enable interrupts and time how long I\'92m sending pulses for. That should give me more precise times when sending and receiving tags. I\'92m not sure this is necessary, but I could do it for future work.\

\b Do Later in the Future Work (all of these can be done after tag unit is built and functioning):\

\b0 1. Use hardware timer for send_pulse() function. This will let you use the micros() function (which needs interrupts) to time how long you send pulses and (should) give you more accurate info on the timing of pulses you send.\
2. Try using a crystal oscillator for timing if you want to compare the accuracies.\
3. Take out your version of timing and keep the micros() one. (or don\'92t compute it. You can do what you want)}